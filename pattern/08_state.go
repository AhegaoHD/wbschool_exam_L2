package pattern

import "fmt"

/*
	Реализовать паттерн «состояние».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/State_pattern
*/

// State интерфейс определяет методы, которые должны реализовать конкретные состояния
type State interface {
	Handle(c *Context)
}

// ConcreteStateA конкретное состояние A
type ConcreteStateA struct{}

func (s *ConcreteStateA) Handle(c *Context) {
	fmt.Println("Doing work in State A")
	c.ChangeState(new(ConcreteStateB))
}

// ConcreteStateB конкретное состояние B
type ConcreteStateB struct{}

func (s *ConcreteStateB) Handle(c *Context) {
	fmt.Println("Doing work in State B")
	c.ChangeState(new(ConcreteStateA))
}

// Context предоставляет интерфейс для клиентов для взаимодействия с состоянием
type Context struct {
	State State
}

func (c *Context) ChangeState(state State) {
	c.State = state
}

func (c *Context) Request() {
	c.State.Handle(c)
}

// Пример использования паттерна "Состояние"
func main() {
	context := new(Context)

	// начнем с состояния A
	context.ChangeState(new(ConcreteStateA))

	// Переключения состояний
	context.Request()
	context.Request()
}

//Применимость паттерна «Состояние»:
//
//Когда поведение объекта зависит от его состояния и может изменяться во время выполнения.
//Когда в коде операций объекта присутствуют многочисленные условные операторы, которые выбирают поведения в зависимости от состояния объекта.
//Плюсы:
//
//Избавляет от множественных условных операторов.
//Упрощает код контекста.
//Концентрирует в себе все поведения, связанные с определённым состоянием.
//Минусы:
//
//Может увеличить количество классов.
//Тесная связь между контекстом и состояниями.
//Примеры использования на практике:
//
//Игры, где объекты могут иметь различные состояния (например, персонаж может быть жив, ранен или мёртв).
//Документооборот, где документ может находиться в разных состояниях (черновик, на проверке, утверждён).
//Управление подключением к сети, где подключение может быть в состоянии "подключено", "в процессе подключения", "разъединено".
